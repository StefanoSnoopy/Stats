-- Settings

select @Start := concat(date(now() - interval 60 minute),' ', SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 60 minute)) DIV 3600) * 3600));
select @Stop := concat(date(now() - interval 0 minute),' ', SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 0 minute)) DIV 3600) * 3600));
select @RPL := '60';
select @Area := 'Alphen';
select @LatMax := '51.491';
select @LatMin := '51.471';
select @LonMin := '4.946';
select @LonMax := '4.973';

-- Get Pokemon data
Create TEMPORARY TABLE rmdb.tmp50
(INDEX (spawnpoint_id))
AS(
select a.spawnpoint_id, a.first_scanned, disappear_time, a.individual_attack, a.individual_defense, a.individual_stamina
from pogodb.pokemon_history_temp a
where
a.first_scanned >= @Start and
a.first_scanned < @Stop and
a.latitude < @LatMax and a.latitude > @LatMin and a.longitude > @LonMin and a.longitude < @LonMax
);

-- Get Spawnpoint data
Create TEMPORARY TABLE rmdb.tmp51
(INDEX (spawnpoint))
AS(
select a.spawnpoint, a.last_scanned, a.first_detection, a.last_non_scanned, a.spawndef
from rmdb.trs_spawn a
where
a.latitude < @LatMax and a.latitude > @LatMin and a.longitude > @LonMin and a.longitude < @LonMax
);

-- Initial insert
INSERT INTO pogodb.stats_area (Datetime,RPL, TRPL, Area)
select @Start, @RPL, @RPL, @Area;

-- Update Pokemon Data
update pogodb.stats_area
set 
Spawnpoints = (select count(distinct(spawnpoint_id)) from rmdb.tmp50),
Mons_all = (select count(first_scanned) from rmdb.tmp50),
MonsIV = (select count(first_scanned) from rmdb.tmp50 where individual_attack is not NULL),
Mons_nonIV = Mons_all-MonsIV,
Iv100 = (select count(first_scanned) from rmdb.tmp50 where individual_attack = 15 and individual_defense = 15 and individual_stamina = 15),
Iv0 = (select count(first_scanned) from rmdb.tmp50 where individual_attack = 0 and individual_defense = 0 and individual_stamina = 0)
where
pogodb.stats_area.Area = @Area and
pogodb.stats_area.RPL = @RPL and
pogodb.stats_area.Datetime = @Start
;

-- table raid data
update pogodb.stats_area
set
Raid_Egg = (select count(*) from rmdb.raid a, rmdb.gym b where a.gym_id = b.gym_id and CONVERT_TZ(a.last_scanned, '+00:00', @@global.time_zone) >= @Start and CONVERT_TZ(a.last_scanned, '+00:00', @@global.time_zone) < @Stop  and b.latitude < @LatMax and b.latitude > @LatMin and b.longitude > @LonMin and b.longitude < @LonMax)
where
pogodb.stats_area.Area = @Area and
pogodb.stats_area.RPL = @RPL and
pogodb.stats_area.Datetime = @Start
;

-- update spawnpoint data
update pogodb.stats_area
set
DBspawns = (select count(*) from rmdb.tmp51),
Spawn_add = (select count(*) from rmdb.tmp51 where first_detection >= @Start and first_detection < @Stop),
Spawn_NULL = (select count(*) from rmdb.tmp51 where last_scanned is NULL),
Last_scanned_today_acc = (select count(*) from rmdb.tmp51 where date(last_non_scanned) = date(@Start)),
Last_scanned_1d = (select count(*) from rmdb.tmp51 where date(last_non_scanned) = date(@Start) - interval 1 day),
Last_scanned_2d = (select count(*) from rmdb.tmp51 where date(last_non_scanned) = date(@Start) - interval 2 day),
Last_scanned_3d = (select count(*) from rmdb.tmp51 where date(last_non_scanned) = date(@Start) - interval 3 day),
Last_scanned_7dp = (select count(*) from rmdb.tmp51 where date(last_non_scanned) < date(@Start) - interval 7 day)
where
pogodb.stats_area.Area = @Area and
pogodb.stats_area.RPL = @RPL and
pogodb.stats_area.Datetime = @Start
;

-- update spawndef + minutes remaining + avg despawn time FOR seen spawns/pokes
update pogodb.stats_area
set 
Spawndef15 = (select count(b.spawnpoint) from rmdb.tmp50 a, rmdb.tmp51 b where a.spawnpoint_id = b.spawnpoint and b.spawndef = 15),
SpawndefNot15 = (select count(b.spawnpoint) from rmdb.tmp50 a, rmdb.tmp51 b where a.spawnpoint_id = b.spawnpoint and b.spawndef <> 15),
MinutesLeft = (select sum(timestampdiff(minute,first_scanned,disappear_time)) from rmdb.tmp50),
AvgMinutesLeft = (select round(avg(timestampdiff(minute,first_scanned,disappear_time))) from rmdb.tmp50),
w5 = (select count(b.spawnpoint) from rmdb.tmp50 a, rmdb.tmp51 b where a.spawnpoint_id = b.spawnpoint and ((b.spawndef <> 15 and timestampdiff(second,first_scanned,disappear_time) >= 1500) or(b.spawndef = 15 and timestampdiff(second,first_scanned,disappear_time) >= 3300))),
w10 = (select count(b.spawnpoint) from rmdb.tmp50 a, rmdb.tmp51 b where a.spawnpoint_id = b.spawnpoint and ((b.spawndef <> 15 and timestampdiff(second,first_scanned,disappear_time) >= 1200) or(b.spawndef = 15 and timestampdiff(second,first_scanned,disappear_time) >= 3000))),
w15 = (select count(b.spawnpoint) from rmdb.tmp50 a, rmdb.tmp51 b where a.spawnpoint_id = b.spawnpoint and ((b.spawndef <> 15 and timestampdiff(second,first_scanned,disappear_time) >= 900) or(b.spawndef = 15 and timestampdiff(second,first_scanned,disappear_time) >= 2700))),
w20 = (select count(b.spawnpoint) from rmdb.tmp50 a, rmdb.tmp51 b where a.spawnpoint_id = b.spawnpoint and ((b.spawndef <> 15 and timestampdiff(second,first_scanned,disappear_time) >= 600) or(b.spawndef = 15 and timestampdiff(second,first_scanned,disappear_time) >= 2400)))
where
pogodb.stats_area.Area = @Area and
pogodb.stats_area.RPL = @RPL and
pogodb.stats_area.Datetime = @Start
;

-- drop tables
drop table rmdb.tmp50;
drop table rmdb.tmp51;
