#!/bin/bash

source config.ini

echo "Create sql table, trigger and procedure files"
echo ""
cp $PATH_TO_STATS/default_files/tables.sql.default $PATH_TO_STATS/tables.sql
cp $PATH_TO_STATS/default_files/triggers.sql.default $PATH_TO_STATS/triggers.sql
cp $PATH_TO_STATS/default_files/procedures.sql.default $PATH_TO_STATS/procedures.sql
cd $PATH_TO_STATS && sed -i "s/pogodb/$STATS_DB/g" *.sql

echo "Create tables"
echo ""
if [ -z "$SQL_password" ]
then
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user $STATS_DB < $PATH_TO_STATS/tables.sql
else
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $STATS_DB < $PATH_TO_STATS/tables.sql
fi

echo "Create triggers"
echo ""
if [ -z "$SQL_password" ]
then
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user $MAD_DB < $PATH_TO_STATS/triggers.sql
else
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $MAD_DB < $PATH_TO_STATS/triggers.sql
fi

echo "Create procedure"
echo ""
if [ -z "$SQL_password" ]
then
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user $MAD_DB < $PATH_TO_STATS/procedures.sql
else
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $MAD_DB < $PATH_TO_STATS/procedures.sql
fi

echo "Create crontab and monthly file"
echo ""
cd $PATH_TO_STATS && rm -f *.default
cp $PATH_TO_STATS/default_files/crontab.txt.default $PATH_TO_STATS/crontab.txt
mkdir -p $PATH_TO_STATS/sql_cron
cd $PATH_TO_STATS/sql_cron && rm -f *.default
cp $PATH_TO_STATS/default_files/month.sh.default $PATH_TO_STATS/sql_cron/month.sh
PATH_TO_STATS2=$(sed 's@/@\\/@g' <<< $PATH_TO_STATS)
cd $PATH_TO_STATS && sed -i "s/pathToStats/$PATH_TO_STATS2/g" *.txt
cd $PATH_TO_STATS && sed -i "s/STATS_DB/$STATS_DB/g" *.txt

if [ -z "$SQL_password" ]
then
  sed -i "s/userpass/-h$DB_IP -P$DB_PORT -u$SQL_user/g" $PATH_TO_STATS/crontab.txt
  sed -i "s/userpass/-h$DB_IP -P$DB_PORT -u$SQL_user/g" $PATH_TO_STATS/sql_cron/month.sh
else
  sed -i "s/userpass/-h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password/g" $PATH_TO_STATS/crontab.txt
  sed -i "s/userpass/-h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password/g" $PATH_TO_STATS/sql_cron/month.sh
fi

if "$SPAWN_CLEANUP"
then
  sed -i "s/#SPAWN_CLEANUP#//g" $PATH_TO_STATS/crontab.txt
  sed -i "s/SPAWN_CLEAN_MIN/$SPAWN_CLEAN_MIN/g" $PATH_TO_STATS/crontab.txt
  sed -i "s/SPAWN_CLEAN_HR/$SPAWN_CLEAN_HR/g" $PATH_TO_STATS/crontab.txt
fi

# Create area world
if [[ "$FENCE" == "world" ]]
then
  echo "Create world.ini and insert MAD origins into table Area"
  cp $PATH_TO_STATS/areas/area.ini.example $PATH_TO_STATS/areas/world.ini
  sed -i "s/Paris/World/g" $PATH_TO_STATS/areas/world.ini
  sed -i "s/50.9876/90/g" $PATH_TO_STATS/areas/world.ini
  sed -i "s/50.1234/-90/g" $PATH_TO_STATS/areas/world.ini
  sed -i "s/4.1234/-180/g" $PATH_TO_STATS/areas/world.ini
  sed -i "s/4.9876/180/g" $PATH_TO_STATS/areas/world.ini
  if [ -z "$SQL_password" ]
  then
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user $STATS_DB -e "insert ignore into $STATS_DB.Area (Origin) select name from $MAD_DB.settings_device;"
  else
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $STATS_DB -e "insert ignore into $STATS_DB.Area (Origin) select name from $MAD_DB.settings_device;"
  fi
  echo ""
fi

# Make sure area world does not exist anymore when using box or MAD
if [[ "$FENCE" == "MAD" ]] || [[ "$FENCE" == "box" ]]
then
cd $PATH_TO_STATS/areas && rm -f world.ini
fi

# Create Area files based on world or box (lat/lon max/min)
if [[ "$FENCE" == "world" ]] || [[ "$FENCE" == "box" ]]
then
  echo "Creating area files based on created .ini files"
  echo "!! If you set FENCE=box make sure to assign devices to areas !!"
  cd $PATH_TO_STATS/sql_cron && rm -f *.sql && rm -f *.default
  for area in "$PATH_TO_STATS"areas/*.ini
  do
    echo "$area"
    source $area
    cp $PATH_TO_STATS/default_files/15_area.sql.default $PATH_TO_STATS/sql_cron/15_"$AREA_NAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/sql_cron/15_"$AREA_NAME"_area.sql
    sed -i "s/Alphen_fence/$AREA_NAME/g" $PATH_TO_STATS/sql_cron/15_"$AREA_NAME"_area.sql
    sed -i "s/FENCE_COORDS/$MIN_LAT $MAX_LON, $MAX_LAT $MAX_LON, $MAX_LAT $MIN_LON, $MIN_LAT $MIN_LON, $MIN_LAT $MAX_LON/g" $PATH_TO_STATS/sql_cron/15_"$AREA_NAME"_area.sql
    cp $PATH_TO_STATS/default_files/60_area.sql.default $PATH_TO_STATS/sql_cron/60_"$AREA_NAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/sql_cron/60_"$AREA_NAME"_area.sql
    sed -i "s/Alphen_fence/$AREA_NAME/g" $PATH_TO_STATS/sql_cron/60_"$AREA_NAME"_area.sql
    sed -i "s/FENCE_COORDS/$MIN_LAT $MAX_LON, $MAX_LAT $MAX_LON, $MAX_LAT $MIN_LON, $MIN_LAT $MIN_LON, $MIN_LAT $MAX_LON/g" $PATH_TO_STATS/sql_cron/60_"$AREA_NAME"_area.sql
    cp $PATH_TO_STATS/default_files/1440_area.sql.default $PATH_TO_STATS/sql_cron/1440_"$AREA_NAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/sql_cron/1440_"$AREA_NAME"_area.sql
    sed -i "s/Alphen_fence/$AREA_NAME/g" $PATH_TO_STATS/sql_cron/1440_"$AREA_NAME"_area.sql
    sed -i "s/FENCE_COORDS/$MIN_LAT $MAX_LON, $MAX_LAT $MAX_LON, $MAX_LAT $MIN_LON, $MIN_LAT $MIN_LON, $MIN_LAT $MAX_LON/g" $PATH_TO_STATS/sql_cron/1440_"$AREA_NAME"_area.sql
  done
  echo ""
fi

# Create area files based on MAD fences
if [[ "$FENCE" == "MAD" ]]
then
  echo "Creating MAD fence config and area files"
  rm -f $PATH_TO_STATS/areas/*.mad

# get MAD fence data
  if [ -z "$SQL_password" ]
  then
        query(){
        mysql -NB -h$DB_IP -P$DB_PORT -u$SQL_user $MAD_DB -e "$1;"
        }
  else
        query(){
        mysql -NB -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $MAD_DB -e "$1;"
        }
  fi
        while read -r geofence_id name;
        do

        query "SELECT LEFT(fence_data,length(fence_data)-1) from settings_geofence where geofence_id = $geofence_id;" | sed 's/\[\"\[/[/g' | sed 's/",/\n/g' | sed 's/"//g' | sed 's/^ //g' | sed 's/\[/ยง\[/g' > $PATH_TO_STATS/areas/input


                IFS=ยง;
                for i in `cat $PATH_TO_STATS/areas/input`;
                do
                        shopt -s lastpipe
                        echo $i | while read -r line;
                                do
                                        if [[ $line == *"["* ]] || [[ $line == *"]"* ]]; then
                                                coord=1
                                                fence=$(echo -n ${line} | sed 's/ /_/g' | tr -d "]" | tr -d "[")
                                                exec > $PATH_TO_STATS/areas/$fence.mad
                                                echo AREA_NAME=\"$name\"
                                                echo -n FENCE_NAME=\"
                                                echo -n "$line" | tr -d "]" | tr -d "["
                                                echo \"
                                        elif [ ! -z "$line" ]; then
                                                if [[ $coord == 1 ]]; then
                                                echo -n POLYGON=\"
                                                fi
                                        echo -n $line | sed s/"]"/\n/ | sed s/,/' '/g
                                        echo -n ", "
                                        let "coord+=1"
                                        fi
                                done
                        echo -n $i | tail +2 | head -1 | sed s/,/' '/g | sed s/$/\"/g
                done | sed s/"(,"/"("/g | sed s/", ,"/,/g
                unset IFS

        done < <(query "$(cat << EOF
        select geofence_id, name from settings_geofence where geofence_id in (select geofence_included from settings_area_mon_mitm);
EOF
        )")
  rm -f $PATH_TO_STATS/areas/input

# create area files
  rm -f $PATH_TO_STATS/sql_cron/*.sql
  rm -f $PATH_TO_STATS/sql_cron/*.default
  for area in "$PATH_TO_STATS"areas/*.mad
  do
    echo "$area"
    source $area
    cp $PATH_TO_STATS/default_files/15_area.sql.default $PATH_TO_STATS/sql_cron/15_"$AREA_NAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/sql_cron/15_"$AREA_NAME"_area.sql
    sed -i "s/Alphen_fence/$FENCE_NAME/g" $PATH_TO_STATS/sql_cron/15_"$AREA_NAME"_area.sql
    sed -i "s/FENCE_COORDS/$POLYGON/g" $PATH_TO_STATS/sql_cron/15_"$AREA_NAME"_area.sql
    cp $PATH_TO_STATS/default_files/60_area.sql.default $PATH_TO_STATS/sql_cron/60_"$AREA_NAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/sql_cron/60_"$AREA_NAME"_area.sql
    sed -i "s/Alphen_fence/$FENCE_NAME/g" $PATH_TO_STATS/sql_cron/60_"$AREA_NAME"_area.sql
    sed -i "s/FENCE_COORDS/$POLYGON/g" $PATH_TO_STATS/sql_cron/60_"$AREA_NAME"_area.sql
    cp $PATH_TO_STATS/default_files/1440_area.sql.default $PATH_TO_STATS/sql_cron/1440_"$AREA_NAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/sql_cron/1440_"$AREA_NAME"_area.sql
    sed -i "s/Alphen_fence/$FENCE_NAME/g" $PATH_TO_STATS/sql_cron/1440_"$AREA_NAME"_area.sql
    sed -i "s/FENCE_COORDS/$POLYGON/g" $PATH_TO_STATS/sql_cron/1440_"$AREA_NAME"_area.sql
  done
fi

# Fill table Area
if [[ "$FENCE" == "MAD" ]] && [[ "$MAD_DEVICE_INSERT" == "true" ]]
then
  echo "Adding devices and areas to table Area"
  if [ -z "$SQL_password" ]
  then
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user $STATS_DB -e "INSERT IGNORE INTO $STATS_DB.Area (Area,Origin) SELECT a.name, f.name FROM $MAD_DB.settings_geofence a, $MAD_DB.settings_area_mon_mitm b, $MAD_DB.settings_area c, $MAD_DB.settings_walkerarea d, $MAD_DB.settings_walker_to_walkerarea e, $MAD_DB.settings_device f WHERE a.geofence_id = b.geofence_included and b.area_id = c.area_id and b.area_id = d.area_id and d.walkerarea_id = e.walkerarea_id and e.walker_id = f.walker_id GROUP BY f.name, b.geofence_included;"
  else
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $STATS_DB -e "INSERT IGNORE INTO $STATS_DB.Area (Area,Origin) SELECT a.name, f.name FROM $MAD_DB.settings_geofence a, $MAD_DB.settings_area_mon_mitm b, $MAD_DB.settings_area c, $MAD_DB.settings_walkerarea d, $MAD_DB.settings_walker_to_walkerarea e, $MAD_DB.settings_device f WHERE a.geofence_id = b.geofence_included and b.area_id = c.area_id and b.area_id = d.area_id and d.walkerarea_id = e.walkerarea_id and e.walker_id = f.walker_id GROUP BY f.name, b.geofence_included;"
  fi
fi

echo "Creating cron files"
echo ""
cp $PATH_TO_STATS/default_files/10080_area.sql.default $PATH_TO_STATS/sql_cron/10080_area.sql
cp $PATH_TO_STATS/default_files/15_worker.sql.default $PATH_TO_STATS/sql_cron/15_worker.sql
cp $PATH_TO_STATS/default_files/60_worker.sql.default $PATH_TO_STATS/sql_cron/60_worker.sql
cp $PATH_TO_STATS/default_files/1440_worker.sql.default $PATH_TO_STATS/sql_cron/1440_worker.sql
cp $PATH_TO_STATS/default_files/10080_worker.sql.default $PATH_TO_STATS/sql_cron/10080_worker.sql
cp $PATH_TO_STATS/default_files/daily.sql.default $PATH_TO_STATS/sql_cron/daily.sql
cp $PATH_TO_STATS/default_files/hourly.sql.default $PATH_TO_STATS/sql_cron/hourly.sql
cp $PATH_TO_STATS/default_files/spawn_cleanup.sql.default $PATH_TO_STATS/sql_cron/spawn_cleanup.sql
sed -i "s/pogodb/$STATS_DB/g" $PATH_TO_STATS/sql_cron/*.sql
sed -i "s/pogodb/$STATS_DB/g" $PATH_TO_STATS/sql_cron/*.sh
sed -i "s/rmdb/$MAD_DB/g" $PATH_TO_STATS/sql_cron/*.sql
sed -i "s/RPL15/$RPL15/g" $PATH_TO_STATS/sql_cron/*.sql
sed -i "s/RPL60/$RPL60/g" $PATH_TO_STATS/sql_cron/*.sql
sed -i "s/RPL1440/$RPL1440/g" $PATH_TO_STATS/sql_cron/*.sql
sed -i "s/RPL10080/$RPL10080/g" $PATH_TO_STATS/sql_cron/*.sql
sed -i "s/QUEST_START/$QUEST_START/g" $PATH_TO_STATS/sql_cron/*.sql
sed -i "s/QUEST_END/$QUEST_END/g" $PATH_TO_STATS/sql_cron/*.sql
sed -i "s/SPAWN_UNSEEN_DAYS/$SPAWN_UNSEEN_DAYS/g" $PATH_TO_STATS/sql_cron/*.sql
sed -i "s/SPAWN_NO_ENDTIME_DAYS/$SPAWN_NO_ENDTIME_DAYS/g" $PATH_TO_STATS/sql_cron/*.sql
sed -i "s/SPAWNDEF15_HOURS/$SPAWNDEF15_HOURS/g" $PATH_TO_STATS/sql_cron/*.sql
sed -i "s/PATH_TO_STATS/$PATH_TO_STATS2/g" $PATH_TO_STATS/sql_cron/*.sh
sed -i "s/monsdb/$monthly_mon_database/g" $PATH_TO_STATS/sql_cron/*.sh

echo "Creating grafana files"
echo ""
mkdir -p $PATH_TO_STATS/grafana
cd $PATH_TO_STATS/grafana/ && rm -f *.json && rm -f *.default
cp $PATH_TO_STATS/default_files/01_stats_kpi.json.default $PATH_TO_STATS/grafana/01_stats_kpi.json
cp $PATH_TO_STATS/default_files/02_stats_network_area.json.default $PATH_TO_STATS/grafana/02_stats_network_area.json
cp $PATH_TO_STATS/default_files/03_stats_network_area_ex.json.default $PATH_TO_STATS/grafana/03_stats_network_area_ex.json
cp $PATH_TO_STATS/default_files/04_stats_worker.json.default $PATH_TO_STATS/grafana/04_stats_worker.json
cp $PATH_TO_STATS/default_files/10_ATVdetails.json.default $PATH_TO_STATS/grafana/10_ATVdetails.json
cp $PATH_TO_STATS/default_files/11_stats_atvdetails_combined.json.default $PATH_TO_STATS/grafana/11_stats_atvdetails_combined.json
cp $PATH_TO_STATS/default_files/12_stats_atvdetails_combined_ex.json.default $PATH_TO_STATS/grafana/12_stats_atvdetails_combined_ex.json
cp $PATH_TO_STATS/default_files/20_mad_stuff.json.default $PATH_TO_STATS/grafana/20_mad_stuff.json
cp $PATH_TO_STATS/default_files/30_mon_stuff.json.default $PATH_TO_STATS/grafana/30_mon_stuff.json
cd $PATH_TO_STATS/grafana/ && sed -i "s/pogodb/$DataSource_stats/g" *.json
cd $PATH_TO_STATS/grafana/ && sed -i "s/rmdb/$DataSource_MAD/g" *.json

# MAD fence update
if [[ "$FENCE" == "MAD" ]]
echo "Enabling MAD fence updates to Stats"
then
cp $PATH_TO_STATS/default_files/MAD_fence_update.sh.default $PATH_TO_STATS/MAD_fence_update.sh
  if [[ "$MAD_FENCE_UPDATE_INTERVAL" == "day" ]]
  then
  sed -i "s/#MAD_FENCE_UPDATE#//g" $PATH_TO_STATS/crontab.txt
  else
  sed -i "s/#MAD_FENCE_UPDATE#12 0/12 */g" $PATH_TO_STATS/crontab.txt
  fi
fi

# Spawndef 15 cleanup set
if "$SPAWNDEF15_CLEANUP"
then
  echo "Set spawndef 15 cleanup"
  echo ""
  sed -i "s/--SPAWNDEF15_CLEANUP-- //g" $PATH_TO_STATS/sql_cron/daily.sql
fi

# Pokestop / quest cleanup
if "$stop_to_gym_remove"
then
  echo "Set removal of stops that became gym"
  echo ""
  sed -i "s/--stop_to_gym_remove-- //g" $PATH_TO_STATS/sql_cron/daily.sql
fi

if "$stop_no_quest_remove"
then
  echo "Set removal pokestop that had no quest scanned for $no_quest_days days"
  echo ""
  sed -i "s/--stop_no_quest_remove-- //g" $PATH_TO_STATS/sql_cron/daily.sql
  sed -i "s/--no_quest_days--/$no_quest_days/g" $PATH_TO_STATS/sql_cron/daily.sql
fi

if "$recalc_quest_routes"
then
  echo "Set recalculation of quest routes"
  echo ""
  cp $PATH_TO_STATS/default_files/quest_recalc.sh.default $PATH_TO_STATS/quest_recalc.sh
  sed -i "s/#quest_recalc.sh.default#//g" $PATH_TO_STATS/crontab.txt
fi

# Pokemon_history settings
if "$mon_backup"
then
  echo "Set pokemon backup"
  echo ""
  sed -i "s/--mon_backup-- //g" $PATH_TO_STATS/sql_cron/daily.sql
fi

if "$mon_cleanup"
then
  echo "Set pokemon cleanup"
  echo ""
  sed -i "s/--mon_cleanup-- //g" $PATH_TO_STATS/sql_cron/daily.sql 
  sed -i "s/--days_to_keep--/$days_to_keep/g" $PATH_TO_STATS/sql_cron/daily.sql
fi

if "$monthly_mon_table"
then
  echo "Set montly backup table"
  echo ""
  sed -i "s/#monthly#//g" $PATH_TO_STATS/crontab.txt
fi

# MAD table cleanup settings
if "$pokemon"
then
  echo "Set MAD table pokemon cleanup"
  echo ""
  sed -i "s/--pokemon-- //g" $PATH_TO_STATS/sql_cron/hourly.sql
fi

if "$trs_stats_detect_raw"
then
  echo "Set MAD table trs_stats_detect_raw cleanup"
  echo ""
  sed -i "s/--detect_raw-- //g" $PATH_TO_STATS/sql_cron/hourly.sql
fi

if "$trs_stats_location_raw"
then
  echo "Set MAD table trs_stats_location_raw cleanup"
  echo ""
  sed -i "s/--location_raw-- //g" $PATH_TO_STATS/sql_cron/hourly.sql
fi

if "$trs_stats_detect"
then
  echo "Set MAD table trs_stats_detect cleanup"
  echo ""
  sed -i "s/--detect-- //g" $PATH_TO_STATS/sql_cron/daily.sql
fi

if "$trs_stats_location"
then
  echo "Set MAD table trs_stats_location cleanup"
  echo ""
  sed -i "s/--location-- //g" $PATH_TO_STATS/sql_cron/daily.sql
fi

if "$trs_usage"
then
  echo "Set MAD table trs_usage cleanup"
  echo ""
  sed -i "s/--usage-- //g" $PATH_TO_STATS/sql_cron/daily.sql
fi

## Checks
#Check MAD collation, else 15_worker will fail
table_check=$(mysql $MAD_DB -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password -se "SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_COLLATION FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$MAD_DB' and (((TABLE_NAME = 'trs_stats_detect' or TABLE_NAME = 'trs_stats_location' or TABLE_NAME = 'trs_stats_loction_raw') and TABLE_COLLATION <>'utf8mb4_general_ci' ) or ((TABLE_NAME = 'trs_status' or TABLE_NAME = 'trs_stats_detect_mon_raw') and TABLE_COLLATION <> 'utf8mb4_unicode_ci'));")
column_check=$(mysql $MAD_DB -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password -se "SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, COLLATION_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '$MAD_DB' and (((TABLE_NAME = 'trs_stats_detect' or TABLE_NAME = 'trs_stats_location' or TABLE_NAME = 'trs_stats_loction_raw') and COLLATION_NAME <>'utf8mb4_general_ci' ) or ((TABLE_NAME = 'trs_status' or TABLE_NAME = 'trs_stats_detect_mon_raw') and COLLATION_NAME <> 'utf8mb4_unicode_ci'));")
# echo 'Checking MAD collation'
if [[ -z $table_check || -z $column_check ]]; then
  echo ""
  else
  echo 'ERROR: (some) MAD table/column collation set incorrect !!!'
  echo 'Check https://github.com/Map-A-Droid/MAD/tree/master/scripts/SQL and adapt accordingly'
  mysql $MAD_DB -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password -se "SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_COLLATION FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$MAD_DB' and (((TABLE_NAME = 'trs_stats_detect' or TABLE_NAME = 'trs_stats_location' or TABLE_NAME = 'trs_stats_loction_raw') and TABLE_COLLATION <>'utf8mb4_general_ci' ) or ((TABLE_NAME = 'trs_status' or TABLE_NAME = 'trs_stats_detect_mon_raw') and TABLE_COLLATION <> 'utf8mb4_unicode_ci'));"
  mysql $MAD_DB -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password -se "SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, COLLATION_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '$MAD_DB' and (((TABLE_NAME = 'trs_stats_detect' or TABLE_NAME = 'trs_stats_location' or TABLE_NAME = 'trs_stats_loction_raw') and COLLATION_NAME <>'utf8mb4_general_ci' ) or ((TABLE_NAME = 'trs_status' or TABLE_NAME = 'trs_stats_detect_mon_raw') and COLLATION_NAME <> 'utf8mb4_unicode_ci'));"
fi
# Make sure QUEST_END is set when using spawndef reset
if "$SPAWNDEF15_CLEANUP"
  then
  if [[ $QUEST_END = "06:00:00" ]]
    then
    echo "Warning: QUEST_END is set to default, make sure it matches your setup"
  fi
fi
# Make sure mon backup is enabled is set when using spawndef reset
if "$SPAWNDEF15_CLEANUP"
  then
  if [[ $mon_backup = "false" ]]
    then
    echo "ERROR: mon_backup needs to be enabled in order to use hourly spawndef reset/cleanup"
  fi
fi
# Make sure not to delete pokemon_history when mon_backup is enabled
if "$monthly_mon_table"
  then
  if "$mon_cleanup"
    then
    echo "ERROR: make sure to disable mon_cleanup as your monthly backup will be incomplete otherwise"
  fi
fi

echo ''
echo "All done"
