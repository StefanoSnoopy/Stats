SET SESSION tx_isolation = 'READ-UNCOMMITTED';

-- add to pokemon_history
--mon_backup-- insert ignore into pogodb.pokemon_history select * from pogodb.pokemon_history_temp where first_scanned < curdate();

-- delete from pokemon_history_temp
select sleep(30);
call pogodb.mon_history_temp_cleanup();

-- cleanup pokemon_history
--mon_cleanup-- delete from pogodb.pokemon_history where first_scanned < curdate() - interval --days_to_keep-- day;

-- reset spawndef 15
--SPAWNDEF15_CLEANUP-- CREATE TEMPORARY TABLE pogodb.tmp60 (INDEX (spawnpoint)) AS( select b.spawnpoint_id as 'spawnpoint', count(b.spawnpoint_id) as 'times' from rmdb.trs_spawn a, pogodb.pokemon_history b where a.spawnpoint = b.spawnpoint_id and a.spawndef = 15 and b.first_scanned like concat(curdate() - interval 1 day,"%") and b.first_scanned >= concat(curdate() -interval 1 day," QUEST_END") and (b.first_scanned > b.disappear_time - interval 30 minute or b.last_modified < b.disappear_time - interval 30 minute) group by spawnpoint_id);
--SPAWNDEF15_CLEANUP-- UPDATE rmdb.trs_spawn SET spawndef = 240  WHERE spawnpoint in (select spawnpoint from pogodb.tmp60 where times >= SPAWNDEF15_HOURS);
--SPAWNDEF15_CLEANUP-- DROP TABLE pogodb.tmp60;

-- backup and delete spawns not seen for x days
insert ignore into pogodb.spawn_unused (spawnpoint,latitude,longitude,spawndef,earliest_unseen,last_scanned,first_detection,last_non_scanned,calc_endminsec)
select spawnpoint,latitude,longitude,spawndef,earliest_unseen,last_scanned,first_detection,last_non_scanned,calc_endminsec
from rmdb.trs_spawn where date(last_non_scanned) < curdate() - interval SPAWN_UNSEEN_DAYS day;
delete from rmdb.trs_spawn where date(last_non_scanned) < curdate() - interval SPAWN_UNSEEN_DAYS day;

-- backup and delete spawns first_detection x days ago and last_scanned is NULL
insert ignore into pogodb.spawn_unused (spawnpoint,latitude,longitude,spawndef,earliest_unseen,last_scanned,first_detection,last_non_scanned,calc_endminsec)
select spawnpoint,latitude,longitude,spawndef,earliest_unseen,last_scanned,first_detection,last_non_scanned,calc_endminsec
from rmdb.trs_spawn where date(first_detection) < curdate() - interval SPAWN_NO_ENDTIME_DAYS day and last_scanned is NULL;
delete from rmdb.trs_spawn where date(first_detection) < curdate() - interval SPAWN_NO_ENDTIME_DAYS day and last_scanned is NULL;

-- Pokestop / Quest cleanup
--stop_to_gym_remove-- delete from rmdb.pokestop where pokestop_id in (select gym_id from rmdb.gym);
--stop_no_quest_remove-- delete from rmdb.pokestop where pokestop_id in (select GUID from rmdb.trs_quest where date(from_unixtime(quest_timestamp)) < curdate() -interval --no_quest_days-- day);
--stop_no_quest_remove-- delete from rmdb.trs_quest where GUID not in (select pokestop_id from rmdb.pokestop);


-- cleanup Stats tables
delete from pogodb.stats_worker
where
(RPL = 15 and Datetime < curdate() - interval RPL15 day) or
(RPL = 60 and Datetime < curdate() - interval RPL60 day) or
(RPL = 1440 and Datetime < curdate() - interval RPL1440 day) or
(RPL = 10080 and Datetime < curdate() - interval RPL10080 day)
;

delete from pogodb.stats_area
where
(RPL = 15 and Datetime < curdate() - interval RPL15 day) or
(RPL = 60 and Datetime < curdate() - interval RPL60 day) or
(RPL = 1440 and Datetime < curdate() - interval RPL1440 day) or
(RPL = 10080 and Datetime < curdate() - interval RPL10080 day)
;

-- cleanup detect
--detect-- delete from rmdb.trs_stats_detect where from_unixtime(timestamp_scan) < curdate();

-- cleanup location
--location-- delete from rmdb.trs_stats_location where from_unixtime(timestamp_scan) < curdate();

-- cleanup status
--usage-- delete from rmdb.trs_usage where from_unixtime(timestamp) < curdate() - interval 30 day;
